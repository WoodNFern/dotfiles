# To the extent possible under law, the author(s) have dedicated all 
# copyright and related and neighboring rights to this software to the 
# public domain worldwide. This software is distributed without any warranty. 
# You should have received a copy of the CC0 Public Domain Dedication along 
# with this software. 
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>. 

# base-files version 4.2-4

# ~/.bashrc: executed by bash(1) for interactive shells.

# The latest version as installed by the Cygwin Setup program can
# always be found at /etc/defaults/etc/skel/.bashrc

# Modifying /etc/skel/.bashrc directly will prevent
# setup from updating it.

# The copy in your home directory (~/.bashrc) is yours, please
# feel free to customise it to create a shell
# environment to your liking.  If you feel a change
# would be benifitial to all, please feel free to send
# a patch to the cygwin mailing list.

# User dependent .bashrc file

#Sudo alias printing an ASCII image of 'Groot' (Guardians of the Galaxy)
alias groot='sudo cat ~/.config/groot.txt && sudo '

# If not running interactively, don't do anything
[[ "$-" != *i* ]] && return

if [ -f "${HOME}/.bash_functions" ]; then
  . "${HOME}/.bash_functions"
fi

# dont nerv me!
set bell-style none

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# Save history immediatly after running command
# With "history -n" it's possible to read all new lines since last read
PROMPT_COMMAND="history -a"

if [ -f "${HOME}/.bash_exports" ] ; then
  source "${HOME}/.bash_exports"
fi

if [ -f "${HOME}/.config/golang" ] ; then
  source "${HOME}/.config/golang"
fi

if [ -f "$HOME/.config/perl" ] ; then
  source "$HOME/.config/perl"
fi

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	    # We have color support; assume it's compliant with Ecma-48
	    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	    # a case would tend to support setf rather than setaf.)
	    color_prompt=yes
    else
	    color_prompt=
    fi
fi

unset color_prompt force_color_prompt

if [ -f "${HOME}/.bash_aliases" ] ; then
  source "${HOME}/.bash_aliases"
fi

if [ -f "${HOME}/.ssh_aliases" ] ; then
 	source "${HOME}/.ssh_aliases"
fi

if [ -f "${HOME}/.local_aliases" ] ; then
  source "${HOME}/.local_aliases"
fi

# Set CONCURRENCY_LEVEL to number of CPUs
if [ -f /proc/cpuinfo ]; then
  # linux style
  CONCURRENCY_LEVEL=`grep -c processor /proc/cpuinfo`
elif [ -x "`which system_profiler`" ]; then
  # mac os style
  CONCURRENCY_LEVEL=`system_profiler SPHardwareDataType 2> /dev/null \
    | grep --color=never -i "total number of cores" \
    | sed 's/[^0-9]*//g'`
else
  CONCURRENCY_LEVEL=1
fi

export CONCURRENCY_LEVEL

# Source additional information, which applies to the current host only
if [ -f "${HOME}/.bash_local" ]; then
	source "${HOME}/.bash_local"
fi

#if [ "$SHLVL" -lt 2 ]; then
#	echo "Hit Ctrl+C to not raise screen now!"
#	sleep 1
#	screen -D -r
#else
if [ "$SHLVL" -gt 4 ]; then
	function ssh() {
		hname=${1##*@}
		echo -n -e "\033k$hname\033\\"
		$(which ssh) $@
		echo -n -e "\033k`hostname`\033\\"
	}

	function telnet() {
		echo -n -e "\033k$1\033\\"
		$(which telnet) $@
		echo -n -e "\033k`hostname`\033\\"
	}

  echo -n -e "\033k`hostname`\033\\"
fi


#Print a cow saying smart things
fortune | cowthink -n

#THIS MUST BE AT THE END OF THE FILE FOR GVM TO WORK!!!
[[ -s "${HOME}/.gvm/bin/gvm-init.sh" && -z $(which gvm-init.sh | grep '/gvm-init.sh') ]] && source "${HOME}/.gvm/bin/gvm-init.sh"
