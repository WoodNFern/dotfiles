[color]
  diff   = auto
  status = auto
  branch = auto
  ui     = true

[color "diff"]
  whitespace = red reverse

[push]
  default = matching
[pull]
	rebase = true
[rebase]
	autoStash = true
[core]
  editor   = vim
  autocrlf = input
  excludesfile = ~/.gitignore_global
  packedGitWindowSize = 16m
  packedGitLimit = 64m
  commentchar = %
  
[merge]
  tool = meld
  conflictstyle = diff3

[branch]
  autosetuprebase = always
[pack]
  windowMemory = 256m
  packSizeLimit = 512m
  threads = 2
  deltaCacheSize = 100m
[rerere]
  enabled = true
[user]
  name = <GIT_USERNAME>
  email = <GIT_EMAIL>
[alias]
  # SVN like shortcuts.
  ci = commit
  st = status
  co = checkout

  # Expect commit message on console per default
  cim = commit -m

  # Ammend a commit
  cia = commit --amend

  # Shows the email address used for commits.
  iam = !git config --get user.email

  # List releases with first line of message
  ls-release = tag -l 'v*' -n1
  lsr = tag -l 'v*' -n1

  # List all files ignored by .gitignore
  ignored = ls-files --other --ignored --exclude-standard

  # Shows a short log about what you did suince one day ago.
  daily = ! git log --all \
    --oneline \
    --since '1 day ago' \
    --regexp-ignore-case \
    --committer $(git iam)

  # A funny git log output using short commits
  lol = ! git log \
	--oneline \
	--graph \
	--decorate \
	--abbrev-commit \
	--date=relative\
	--pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' \
	--all
  # A nice git log with branches shown as railroads.
  tree = log \
    --oneline \
    --graph \
    --decorate \
    --all
  # Also nice log output.
  graph = log \
    --oneline \
    --graph \
    --abbrev-commit \
    --date=relative \
    --pretty=format:'%Cred%h%Creset-%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
  # And a third flavor for log.
  lg = log \
    --graph \
    --abbrev-commit \
    --date=relative \
    --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
  # Unstage any files that have been added to the staging area
  unstage = reset HEAD

  # Shows a list of tags. Annotated tags have an * before the name.
  listtags = ! git for-each-ref \
    --sort=subject refs/tags \
    | awk '{print $2, $3}' \
    | sed 's,tag refs/tags/, * ,' \
    | sed 's,commit refs/tags/,   ,'

  # Show all commits with the giben ticket id.
  # Example (single ticket id):
  # $> git ticket 1678
  # Example (multiple ticket id):
  # $> git ticket "38750\|39829\|41521"
  ticket = ! sh -c 'git log \
    --date=local \
    --reverse --pretty=format:\"%H%x09%ad%x09%cn%x09%s\" \
    --regexp-ignore-case \
    --grep=\"${1}\"' -
  # Similar to `git ticket` but shows all affected files instead of the commit list.
  ticket-files = ! sh -c 'git log --pretty=format:\"\" \
    --regexp-ignore-case \
    --grep=\"${1}\" --name-only | sort | uniq' -

  # Add a new alias to global config.
  alias = "! sh -c '[ $# = 2 ] && \
    git config --global alias.\"$1\" \"$2\" && \
    exit 0 || echo \"usage: git alias <new alias> <original command>\" >&2 && \
    exit 1' -"

  # Shows the name of current branch checked out.
  branchname = rev-parse --abbrev-ref HEAD

  # Updates your repo by rebasing and shows a log of the updated stuff.
  up = ! sh -c 'git pull --rebase && \
    git log \
      --pretty=format:\"%Cgreen%h %Cblue%s %Cred[%an (%cn)] %Creset- (%ai [%ci])\" ORIG_HEAD..'

    most-affected-files = ! sh -c 'git log --since=\"90 days ago\" --pretty=format:\"\" --name-only | \
        grep "[^\\s]" | \
        sort | \
        uniq -c | \
        sort -nr | \
        head -10'

  # Updates your repo by rebasing, shows a log of the updated stuff and pushes your changes
  # (Especially useful for hackathons)
  pp = ! sh -c 'git up && git push'

  # Push all branches to all remote repositories
  # See https://stackoverflow.com/a/18674313
  pushall = !git remote | xargs -L1 git push --all

  # Shows a diff for all staged files
  diffc = diff --cached

  # Grep grouped by files with lines.
  # http://travisjeffery.com/b/2012/02/search-a-git-repo-like-a-ninja/
  g = grep --break --heading --line-number
